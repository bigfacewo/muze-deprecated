---
  title: "Action Model"
  description: "Documented Methods"
  sections: 
    - 
      type: "markdown-section"
      content: "\n\nThis class is initiated only once in lifecycle and is reponsible for regisration of physical and behavioural\nactions and side effects and the mapping between them.\n\nTo get the instance of action model\n```\n const ActionModel = muze.ActionModel;\n```"
    - 
      type: "markdown-section"
      content: "<h2><span style=\"font-family: Source Code Pro;font-weight:500;font-size:24px;color: #eb5757\"><a name=for></a> for </span></h2>\n\nTakes an array of canvases on which the physical and behavioural actions will get registered."
    - 
      type: "markdown-section"
      content: "<p class=\"sub-header\">Parameters:</p>\n<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead>\n<tr>\n                <td class=\"param-name\">components</td>\n                <td><p>Canvas</p> </td>\n                <td><p>Array of canvases</p> </td>\n            </tr></table>"
    - 
      type: "markdown-section"
      content: "<a name=ActionModel></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">[actionmodel](api-actionmodel):&nbsp;</span>Instance of action model."
    - 
      type: "markdown-section"
      content: "<h2><span style=\"font-family: Source Code Pro;font-weight:500;font-size:24px;color: #eb5757\"><a name=registerPhysicalActions></a> registerPhysicalActions </span></h2>\n\nRegisters physical actions on the canvases. It takes an object with key as the name of action and value having\nthe definition of the action.\n\nTo register a [PhysicalAction](PhysicalAction),\n```\n const ActionModel = muze.ActionModel;\n ActionModel\n      // Physical actions will be registered on these canvases.\n     .for(canvas)\n     .registerPhysicalActions({\n         // Key is the name of physical action.\n         ctrlClick: (firebolt) => (targetEl, behaviours) => {\n             targetEl.on('click', function (data) {\n                 const event = utils.getEvent();\n                 const pos = utils.getClientPoint(event, this);\n                 // Get the data point nearest to the mouse position.\n                 const nearestPoint = firebolt.context.getNearestPoint(pos, {\n                     data\n                 });\n                 // Prepare the payload\n                 const payload = {\n                     criteria: nearestPoint.id\n                 };\n                 behaviours.forEach((behaviour) => firebolt.dispatchBehaviour(behaviour, payload));\n             });\n         }\n     });\n```"
    - 
      type: "markdown-section"
      content: "<p class=\"sub-header\">Parameters:</p>\n<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead>\n<tr>\n                <td class=\"param-name\">action</td>\n                <td><p>Object</p> </td>\n                <td><p>Names of physical actions and their definitions.</p> </td>\n            </tr></table>"
    - 
      type: "markdown-section"
      content: "<a name=ActionModel></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">[actionmodel](api-actionmodel):&nbsp;</span>Instance of the action model."
    - 
      type: "markdown-section"
      content: "<h2><span style=\"font-family: Source Code Pro;font-weight:500;font-size:24px;color: #eb5757\"><a name=registerBehaviouralActions></a> registerBehaviouralActions </span></h2>\n\nRegisters behavioural actions on the canvases. It takes definitions of the behavioural actions and registers\nthem on the canvases. Every behavioural action must inherit the [GenericBehaviour](GenericBehaviour) class.\n\nTo register a behavioural action\n```\n // Define a new behavioural action\n class SingleSelectBehaviour extends GenericBehaviour {\n     static formalName () {\n         return 'singleSelect';\n     }\n\n     setSelectionSet (addSet, selectionSet) {\n         if (addSet === null) {\n             selectionSet.reset();\n         } else if (addSet.length) {\n             const existingAddSet = selectionSet.getExistingEntrySet(addSet);\n             if (existingAddSet.length){\n                 selectionSet.reset();\n             } else {\n              selectionSet.add(addSet);\n             }\n         } else {\n             selectionSet.reset();\n         }\n     }\n}\nmuze.ActionModel.registerBehaviouralActions(SingleSelectBehaviour);\n```"
    - 
      type: "markdown-section"
      content: "<p class=\"sub-header\">Parameters:</p>\n<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead>\n<tr>\n                <td class=\"param-name\">actions</td>\n                <td><p>GenericBehaviour</p> </td>\n                <td><p>Definition of behavioural actions.</p> </td>\n            </tr></table>"
    - 
      type: "markdown-section"
      content: "<a name=ActionModel></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">[actionmodel](api-actionmodel):&nbsp;</span>Instance of action model."
    - 
      type: "markdown-section"
      content: "<h2><span style=\"font-family: Source Code Pro;font-weight:500;font-size:24px;color: #eb5757\"><a name=registerPhysicalBehaviouralMap></a> registerPhysicalBehaviouralMap </span></h2>\n\nRegisters the mapping of physical and behavioural actions. This mapping is used to establish which behavioural\nactions should be dispatched on any triggering of physical actions.\n\nTo map physical actions with behavioural actions,\n```\n muze.ActionModel.registerPhysicalBehaviouralMap({\n     ctrlClick: {\n         behaviours: ['select'] // This array must be the formal names of the behavioural actions.\n     }\n });\n```"
    - 
      type: "markdown-section"
      content: "<p class=\"sub-header\">Parameters:</p>\n<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead>\n<tr>\n                <td class=\"param-name\">map</td>\n                <td><p>Object</p> </td>\n                <td><p>Contains the physical and behavioural action map. <p><code>{      // Name of the physical action      click: {          // Target element selector. This is an optional field. If not passed, then by default takes the          // container element of visual unit.          target: &#39;.muze-layers-area path&#39;,          // Behaviours which should be dispatched on triggering of the mapped physical action.          behaviours: [&#39;select&#39;]      }   }</code></p></p> </td>\n            </tr></table>"
    - 
      type: "markdown-section"
      content: "<a name=ActionModel></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">[actionmodel](api-actionmodel):&nbsp;</span>Instance of action model."
    - 
      type: "markdown-section"
      content: "<h2><span style=\"font-family: Source Code Pro;font-weight:500;font-size:24px;color: #eb5757\"><a name=registerPropagationBehaviourMap></a> registerPropagationBehaviourMap </span></h2>\n\nRegisters what behaviour to propagate on dispatch of a certain behavioural action. By default, when any\nbehavioural action is dispatched, then the same behavioural action gets propagated to all the other canvases.\nThis can be changed using this api.\n\nTo register what behaviour should be propagated on dispatch of any behavioural action,\n```\n ActionModel.for(canvas1, canvas2).registerPropagationBehaviourMap({\n     select: 'filter',\n     brush: 'filter'\n });\n```"
    - 
      type: "markdown-section"
      content: "<p class=\"sub-header\">Parameters:</p>\n<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead>\n<tr>\n                <td class=\"param-name\">map</td>\n                <td><p>Object</p> </td>\n                <td><p>Propagation behaviour map.</p> </td>\n            </tr></table>"
    - 
      type: "markdown-section"
      content: "<a name=ActionModel></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">[actionmodel](api-actionmodel):&nbsp;</span>Instance of action model."
    - 
      type: "markdown-section"
      content: "<h2><span style=\"font-family: Source Code Pro;font-weight:500;font-size:24px;color: #eb5757\"><a name=mapSideEffects></a> mapSideEffects </span></h2>\n\nRegisters the mapping of side effects and behavioural actions. It takes an object which contains key as the\nname of behavioural action and the side effects which will be linked to it.\n\nTo map side effects to select behaviour,\n```\n muze.ActionModel.mapSideEffects({\n     select: ['infoBox'] // This array must be the formal names of the side effects\n });\n```\n\nTo map side effects to select behaviour, but disable all the default side effects attached with this behaviour,\n```\n muze.ActionModel.mapSideEffects({\n     select: {\n         effects: ['infoBox'],\n         preventDefaultActions: true\n     }\n });"
    - 
      type: "markdown-section"
      content: "<p class=\"sub-header\">Parameters:</p>\n<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead>\n<tr>\n                <td class=\"param-name\">map</td>\n                <td><p>Object</p> </td>\n                <td><p>Mapping of behavioural actions and side effects. <p><code>{          select: [&#39;infoBox&#39;]     }</code></p></p> </td>\n            </tr></table>"
    - 
      type: "markdown-section"
      content: "<a name=ActionModel></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">[actionmodel](api-actionmodel):&nbsp;</span>Instance of action model."
    - 
      type: "markdown-section"
      content: "<h2><span style=\"font-family: Source Code Pro;font-weight:500;font-size:24px;color: #eb5757\"><a name=registerSideEffects></a> registerSideEffects </span></h2>\n\nRegisters the side effects on the registered canvases. It takes definitions of side effects and registers them\non the canvases. Every side effect must inherit the base class [GenericSideEffect](GenericSideEffect) or\n[SpawnableSideEffect](SpawnableSideEffect) or [SurrogateSideEffect](SurrogateSideEffect) class.\n\n```\n// Define a custom side effect\n class InfoBox extends SpawnableSideEffect {\n     static formalName () {\n         return 'infoBox';\n     }\n\n     apply (selectionSet) {\n     }\n }\n muze.ActionModel.registerSideEffects(InfoBox);\n```"
    - 
      type: "markdown-section"
      content: "<p class=\"sub-header\">Parameters:</p>\n<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead>\n<tr>\n                <td class=\"param-name\">sideEffects</td>\n                <td><p>GenericSideEffect</p> </td>\n                <td><p>Definition of side effects.</p> </td>\n            </tr></table>"
    - 
      type: "markdown-section"
      content: "<a name=ActionModel></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">[actionmodel](api-actionmodel):&nbsp;</span>Instance of action model."
    - 
      type: "markdown-section"
      content: "<h2><span style=\"font-family: Source Code Pro;font-weight:500;font-size:24px;color: #eb5757\"><a name=dissociateBehaviour></a> dissociateBehaviour </span></h2>\n\nBreaks the link between behavioural actions and physical actions. It takes an array of behavioural action\nand it's physical action.\n\nTo dissociate behavioural actions from physical actions\n```\n muze.ActionModel.dissociateBehaviour(['select', 'click'], ['highlight', 'hover']);\n```"
    - 
      type: "markdown-section"
      content: "<p class=\"sub-header\">Parameters:</p>\n<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead>\n<tr>\n                <td class=\"param-name\">maps</td>\n                <td><p>Array</p> </td>\n                <td><p>Array of behavioural action and physical action.</p> </td>\n            </tr></table>"
    - 
      type: "markdown-section"
      content: "<a name=ActionModel></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">[actionmodel](api-actionmodel):&nbsp;</span>Instance of action model."
    - 
      type: "markdown-section"
      content: "<h2><span style=\"font-family: Source Code Pro;font-weight:500;font-size:24px;color: #eb5757\"><a name=dissociateSideEffect></a> dissociateSideEffect </span></h2>\n\nBreaks the link between side effects and behavioural actions. It takes an array of formal names of the side\neffects and it's linked behavioural action.\n\nTo dissociate side effects from behavioural actions\n```\n muze.ActionModel.dissociateSideEffect(['crossline', 'highlight'], ['selectionBox', 'brush']);\n```"
    - 
      type: "markdown-section"
      content: "<p class=\"sub-header\">Parameters:</p>\n<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead>\n<tr>\n                <td class=\"param-name\">maps</td>\n                <td><p>Array</p> </td>\n                <td><p>Array of side effects and behavioural actions.</p> </td>\n            </tr></table>"
    - 
      type: "markdown-section"
      content: "<a name=ActionModel></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">[actionmodel](api-actionmodel):&nbsp;</span>Instance of action model."
    - 
      type: "markdown-section"
      content: "<h2><span style=\"font-family: Source Code Pro;font-weight:500;font-size:24px;color: #eb5757\"><a name=enableCrossInteractivity></a> enableCrossInteractivity </span></h2>\n\nBy default cross interactivity is disabled between canvases. This enables cross interaction between the canvases\nso that any action happening in one canvas gets dispatched on other canvases as well. An optional policy can also\nbe passed in this method. The policy can be used to control on which canvases the behavioural actions and\nside effects gets dispatched.\n\nTo just enable cross interactivity between two canvases,\n```\n ActionModel.for(canvas1, canvas2)\n     .enableCrossInteractivity();\n```\n\nTo enable cross interactivity but enable any behavioural action only when it is triggered from canvas1.\n```\n ActionModel.for(canvas1, canvas2)\n     .enableCrossInteractivity({\n         behaviours: {\n             // Here * stands for any behavioural action name. We can also give any name of behavioural action\n             // in place of this.\n             '*': (propPayload, context) => {\n                 return propPayload.sourceCanvas === canvas1.alias();\n             }\n         }\n     });\n```\n\nTo enable cross interactivity but enable tooltip effect if the action is propagated from canvas1,\n```\n ActionModel.for(canvas1, canvas2)\n     .enableCrossInteractivity({\n         sideEffects: {\n             tooltip: (propPayload, context) => {\n                 return propPayload.sourceCanvas === canvas1.alias();\n             }\n         }\n     });\n```"
    - 
      type: "markdown-section"
      content: "<p class=\"sub-header\">Parameters:</p>\n<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead>\n<tr>\n                <td class=\"param-name\">policy</td>\n                <td><p>Object</p> </td>\n                <td><p>Policy definition.</p> </td>\n            </tr></table>"
    - 
      type: "markdown-section"
      content: "<a name=ActionModel></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">[actionmodel](api-actionmodel):&nbsp;</span>Instance of action model."
