---
  title: "Group Firebolt"
  description: "Documented Methods"
  sections: 
    - 
      type: "markdown-section"
      content: "## <a name=GroupFireBolt></a> <span style=\"font-family: Source Code Pro; font-weight: 500;color: #eb5757;\">GroupFireBolt</span>\n\nThis class is responsible for dispatching any behavioural action to all the visual units housed by the canvas.\nIt is created by [Canvas](Canvas). This class does not handle any physical actions. Physical actions get triggered\nin [VisualUnit](VisualUnit) which is managed by it's own firebolt instance. The firebolt instance of canvas only\npropagates the action to all the visual units in it's composition.\n\nTo get the firebolt instance of [Canvas](Canvas)\n```\n const firebolt = canvas.firebolt();\n```"
    - 
      type: "markdown-section"
      content: "<h2><span style=\"font-family: Source Code Pro;font-weight:500;font-size:24px;color: #eb5757\"><a name=dispatchBehaviour></a> dispatchBehaviour </span></h2>\n\nDispatches a behavioural action with a payload. It takes the name of the behavioural action and a payload\nobject which contains the criteria aend an array of side effects which determines what side effects are\ngoing to be shown in each visual unit of the canvas. It prepares the datamodel from the given criteria\nand initiates a propagation from the datamodel of canvas. Then all the visual units of canvas which listens\nto the propagation gets informed on which rows got selected and dispatches the behavioural action sent during\npropagation.\n\nTo dispatch a behavioural action on the canvas\n```\n // Get the firebolt instance of the canvas\n const firebolt = canvas.firebolt();\n // Dispatch a brush behaviour\n firebolt.dispatchBehaviour('brush', {\n     // Selects all the rows with Horsepower having range between 100 and 200.\n     criteria: {\n         Horsepower: [100, 200]\n     }\n });\n// On dispatch of this behavioural action, a selection box gets created and plots gets faded out which are the\n// default side effects mapped to this behavioural action.\n```\n\n```\nAdditionally, it can also be passed an array of side effects in the payload.\n // Dispatch a select behaviour with only crossline as side effect.\n firebolt.dispatchBehaviour('select', {\n     criteria: {\n         Cylinders: ['8']\n     },\n     sideEffects: ['crossline']\n });\n```"
    - 
      type: "markdown-section"
      content: "<p class=\"sub-header\">Parameters:</p>\n<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead>\n<tr>\n                <td class=\"param-name\">behaviour</td>\n                <td><p>string</p> </td>\n                <td><p>Name of the behavioural action</p> </td>\n            </tr>\n<tr>\n                <td class=\"param-name\">payload</td>\n                <td><p>Object</p> </td>\n                <td><p>Object which contains the interaction information.<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead></p> <p><tr>                 <td class=\"param-name\">criteria</td>                 <td><p>Object</p> <p>Array<Array></p> </td>                 <td><p>Identifiers by which the selection happens.</p> </td>             </tr></p> <p><tr>                 <td class=\"param-name\">sideEffects</td>                 <td><p>Array&lt;(string|Object)&gt;</p> </td>                 <td><p>Side effects which needs to be shown.</p> </td>             </tr></table></p> </td>\n            </tr></table>"
    - 
      type: "markdown-section"
      content: "<a name=GroupFireBolt></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">[groupfirebolt](api-groupfirebolt):&nbsp;</span>Instance of firebolt."
