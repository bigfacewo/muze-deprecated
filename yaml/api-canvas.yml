---
  title: "Canvas"
  description: "Documented Methods"
  sections: 
    - 
      type: "markdown-section"
      content: "\n\nCanvas is a logical component which houses a visualization by taking multiple variable in different encoding channel.\nCanvas manages lifecycle of many other logical component and exposes one consistent interface for creation of chart.\nCanvas is intialized from environment with settings from environment and singleton dependencies.\n\nTo create an instance of canvas\n```\n const env = Muze();\n const canvas = env.canvas()\n```"
    - 
      type: "markdown-section"
      content: "<h2><span style=\"font-family: Source Code Pro;font-weight:500;font-size:24px;color: #eb5757\"><a name=layout></a> layout </span></h2>\n\nRetrieves an instance of layout which is responsible for layouting. Layout is responsible for creating faceted\npresentation using table layout."
    - 
      type: "markdown-section"
      content: "<a name=GridLayout></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">[gridlayout](api-gridlayout):&nbsp;</span>Instance of layout attached to canvas."
    - 
      type: "markdown-section"
      content: "<h2><span style=\"font-family: Source Code Pro;font-weight:500;font-size:24px;color: #eb5757\"><a name=composition></a> composition </span></h2>\n\nRetrieves the composition for a canvas"
    - 
      type: "markdown-section"
      content: "<a name=object></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">object:&nbsp;</span><p>Instances of the components which canvas requires to draw the full visualization.\n     <pre><code>         {\n             layout: // Instance of <a href=\"GridLayout\">GridLayout</a>\n             legend: // Instance of <a href=\"Legend\">Legend</a>\n             subtitle: // Instance of <a href=\"TextCell\">TextCell</a> using which the title is rendered\n             title: // Instance of <a href=\"TextCell\">TextCell</a> using which the title is rendered\n             visualGroup: // Instance of <a href=\"visualGroup\">visualGroup</a>\n         }\n</code></pre></p>\n"
    - 
      type: "markdown-section"
      content: "<h2><span style=\"font-family: Source Code Pro;font-weight:500;font-size:24px;color: #eb5757\"><a name=alias></a> alias </span></h2>\n\nSets or gets the alias of the canvas. Alias is a name by which the canvas can be referred.\n\nWhen setter"
    - 
      type: "markdown-section"
      content: "<p class=\"sub-header\">Parameters:</p>\n<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead>\n<tr>\n                <td class=\"param-name\">alias</td>\n                <td><p>string</p> </td>\n                <td><p>Name of the alias.</p> </td>\n            </tr></table>"
    - 
      type: "markdown-section"
      content: "<a name=Canvas></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">[canvas](api-canvas):&nbsp;</span>Instance of the canvas.\n\nWhen getter"
    - 
      type: "markdown-section"
      content: "<a name=string></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">string:&nbsp;</span>Alias of canvas."
    - 
      type: "markdown-section"
      content: "<h2><span style=\"font-family: Source Code Pro;font-weight:500;font-size:24px;color: #eb5757\"><a name=firebolt></a> firebolt </span></h2>\n\nReturns the instance of firebolt associated with this canvas. The firebolt instance can be used to dispatch a\nbehaviour dynamically on the canvas. This firebolt does not handle any physical actions. It is just used to\npropagate the action to all the visual units in it's composition."
    - 
      type: "markdown-section"
      content: "<a name=GroupFireBolt></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">[groupfirebolt](api-groupfirebolt):&nbsp;</span>Instance of firebolt associated with canvas."
    - 
      type: "markdown-section"
      content: "<h2><span style=\"font-family: Source Code Pro;font-weight:500;font-size:24px;color: #eb5757\"><a name=once></a> once </span></h2>\n\nReturns a promise for various [LifecycleEvents](LifecycleEvents) of the various components of canvas. The promise gets\nresolved once the particular event gets completed.\n\nTo use this,\n```\n     canvas.once('layer.drawn').then(() => {\n         // Do any post drawing work here.\n     });\n```"
    - 
      type: "markdown-section"
      content: "<p class=\"sub-header\">Parameters:</p>\n<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead>\n<tr>\n                <td class=\"param-name\">eventName</td>\n                <td><p>string</p> </td>\n                <td><p>Name of the lifecycle event.</p> </td>\n            </tr></table>"
    - 
      type: "markdown-section"
      content: "<a name=Promise></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">[promise](api-promise):&nbsp;</span>A pending promise waiting for resolve to be called."
    - 
      type: "markdown-section"
      content: "<h2><span style=\"font-family: Source Code Pro;font-weight:500;font-size:24px;color: #eb5757\"><a name=xAxes></a> xAxes </span></h2>\n\nReturns the instances of x axis of the canvas. It returns the instances in a two dimensional array form.\n\n```\n  // The first element in the sub array represents the top axis and the second element represents the bottom\n  // axis.\n  [\n     [X1, X2],\n     [X3, X4]\n  ]\n```"
    - 
      type: "markdown-section"
      content: "<a name=Array.<Array>></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">array&lt;array&gt;:&nbsp;</span>Instances of x axis."
    - 
      type: "markdown-section"
      content: "<h2><span style=\"font-family: Source Code Pro;font-weight:500;font-size:24px;color: #eb5757\"><a name=yAxes></a> yAxes </span></h2>\n\nReturns the instances of y axis of the canvas. It returns the instances in a two dimensional array form.\n\n```\n  // The first element in the sub array represents the left axis and the second element represents the right\n  // axis.\n  [\n     [Y1, Y2],\n     [Y3, Y4]\n  ]\n```"
    - 
      type: "markdown-section"
      content: "<a name=Array.<Array>></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">array&lt;array&gt;:&nbsp;</span>Instances of y axis."
    - 
      type: "markdown-section"
      content: "<h2><span style=\"font-family: Source Code Pro;font-weight:500;font-size:24px;color: #eb5757\"><a name=getRetinalAxes></a> getRetinalAxes </span></h2>\n\nReturns all the retinal axis of the canvas. Color, shape and size axis are combinedly called retinal axis."
    - 
      type: "markdown-section"
      content: "<a name=Object></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">object:&nbsp;</span><p>Instances of retinal axis.\n         <pre><code>             {\n                 color: [ColorAxis], // Array of color axis.\n                 shape: [ShapeAxis], // Array of shape axis.\n                 size: [SizeAxis] // Array of size axis.\n             }\n</code></pre></p>\n"
    - 
      type: "markdown-section"
      content: "<h2><span style=\"font-family: Source Code Pro;font-weight:500;font-size:24px;color: #eb5757\"><a name=rows></a> rows </span></h2>\n\nTakes the variable using which the row facets are made. Row facets are horizontal facet. The variables in\nparameter of the method controls presentation of facets can have {@link http://www.layoutvariation.com |\ndifferent variations}."
    - 
      type: "markdown-section"
      content: "<p class=\"sub-header\">Parameters:</p>\n<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead>\n<tr>\n                <td class=\"param-name\">leftVars</td>\n                <td><p>Array<string></p> </td>\n                <td><p>Variables using which the left facets are created</p> </td>\n            </tr>\n<tr>\n                <td class=\"param-name\">rightVars</td>\n                <td><p>Array<string></p> </td>\n                <td><p>Variables using which the right facets are created</p> </td>\n            </tr></table>"
    - 
      type: "markdown-section"
      content: "<a name=Canvas></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">[canvas](api-canvas):&nbsp;</span>instance of current canvas"
    - 
      type: "markdown-section"
      content: "<h2><span style=\"font-family: Source Code Pro;font-weight:500;font-size:24px;color: #eb5757\"><a name=columns></a> columns </span></h2>\n\nTakes the variable using which the column facets are made. Columns facets are vertical facet. The variables in\nparameter of the method controls presentation of facets can have {@link http://www.layoutvariation.com |\ndifferent variations}."
    - 
      type: "markdown-section"
      content: "<p class=\"sub-header\">Parameters:</p>\n<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead>\n<tr>\n                <td class=\"param-name\">bottomVars</td>\n                <td><p>Array<string></p> </td>\n                <td><p>Variables using which the bottom facets are created</p> </td>\n            </tr>\n<tr>\n                <td class=\"param-name\">topVars</td>\n                <td><p>Array<string></p> </td>\n                <td><p>Variables using which the top facets are created</p> </td>\n            </tr></table>"
    - 
      type: "markdown-section"
      content: "<a name=Canvas></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">[canvas](api-canvas):&nbsp;</span>Instance of current canvas\n}"
    - 
      type: "markdown-section"
      content: "<h2><span style=\"font-family: Source Code Pro;font-weight:500;font-size:24px;color: #eb5757\"><a name=color></a> color </span></h2>\n\nTakes a variable and assign it to color encoding channel. Color scale is created based on the type of the\nvaraible assigned. If a dimension is passed, the discrete color scale is created. If a measure is passed gradient\ncolor scale is created."
    - 
      type: "markdown-section"
      content: "<p class=\"sub-header\">Parameters:</p>\n<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead>\n<tr>\n                <td class=\"param-name\">encoding</td>\n                <td><p>string</p> <p>object</p> </td>\n                <td><p>Name of the variable which is assigned to color encoding channel or an object      containing scale information<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead></p> <p><tr>                 <td class=\"param-name\">field</td>                 <td><p>string</p> </td>                 <td><p>Name of the variable</p> </td>             </tr></p> <p><tr>                 <td class=\"param-name\">scheme</td>                 <td><p>string</p> <p>Array<string></p> </td>                 <td><p>color scheme could be passed as an array of colors or string      name of <a href=\"http://link-to-d3-pallets.com\">d3 scale chromatic</a>. if not passed Muze&#39;s default color      scheme is used.</p> </td>             </tr></p> <p><tr>                 <td class=\"param-name\">step</td>                 <td><p>Boolean</p> </td>                 <td><p>Determines if step interpolation is needed, if a measure is assigned in      color encoding channel</p> </td>             </tr></p> <p><tr>                 <td class=\"param-name\">stops</td>                 <td><p>Number</p> <p>Array<Number></p> </td>                 <td><p>Defines custom stops for a continuous color scale. If      an interger is passed, then that that many uniform buckets are created. This effect is evident if step      interpolation is used. Alternatively passing array of stops acts as domain of the scale where one to one      mapping between stop array and scheme array is established</p> </td>             </tr></table></p> </td>\n            </tr></table>"
    - 
      type: "markdown-section"
      content: "<a name=Canvas></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">[canvas](api-canvas):&nbsp;</span>Instance of current canvas"
    - 
      type: "markdown-section"
      content: "<h2><span style=\"font-family: Source Code Pro;font-weight:500;font-size:24px;color: #eb5757\"><a name=shape></a> shape </span></h2>\n\nTakes a variable and assign it to shape encoding channel. Shape scale always expect a dimension assigned to the\nchannel."
    - 
      type: "markdown-section"
      content: "<p class=\"sub-header\">Parameters:</p>\n<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead>\n<tr>\n                <td class=\"param-name\">encoding</td>\n                <td><p>string</p> <p>object</p> </td>\n                <td><p>Name of the dimension which is assigned to shape encoding channel or an object      containing scale information.<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead></p> <p><tr>                 <td class=\"param-name\">field</td>                 <td><p>string</p> </td>                 <td><p>Name of the dimension</p> </td>             </tr></p> <p><tr>                 <td class=\"param-name\">range</td>                 <td><p>Array<string></p> </td>                 <td><p>Range of shape</p> </td>             </tr></table></p> </td>\n            </tr></table>"
    - 
      type: "markdown-section"
      content: "<a name=Canvas></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">[canvas](api-canvas):&nbsp;</span>Instance of current canvas"
    - 
      type: "markdown-section"
      content: "<h2><span style=\"font-family: Source Code Pro;font-weight:500;font-size:24px;color: #eb5757\"><a name=size></a> size </span></h2>\n\nTakes a variable and assign it to size encoding channel. Size encoding can take either a measure or a dimension.\nSize encoding determines size of a mark."
    - 
      type: "markdown-section"
      content: "<p class=\"sub-header\">Parameters:</p>\n<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead>\n<tr>\n                <td class=\"param-name\">encoding</td>\n                <td><p>string</p> <p>object</p> </td>\n                <td><p>Name of the variable which is assigned to size encoding channel or an object      containing scale information.<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead></p> <p><tr>                 <td class=\"param-name\">field</td>                 <td><p>string</p> </td>                 <td><p>Name of the variable</p> </td>             </tr></p> <p><tr>                 <td class=\"param-name\">range</td>                 <td><p>Array<string></p> </td>                 <td><p>Size values. The value here is proportional to area of a      circle</p> </td>             </tr></table></p> </td>\n            </tr></table>"
    - 
      type: "markdown-section"
      content: "<a name=Canvas></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">[canvas](api-canvas):&nbsp;</span>Instance of current canvas"
    - 
      type: "markdown-section"
      content: "<h2><span style=\"font-family: Source Code Pro;font-weight:500;font-size:24px;color: #eb5757\"><a name=detail></a> detail </span></h2>\n\nTakes a dimension which wont be assigned in any encoding channels but would be used to mantain granularity of\ndata."
    - 
      type: "markdown-section"
      content: "<p class=\"sub-header\">Parameters:</p>\n<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead>\n<tr>\n                <td class=\"param-name\">encoding</td>\n                <td><p>string</p> <p>object</p> </td>\n                <td><p>Name of the variable which is assigned to size encoding channel or an object      containing scale information.<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead></p> <p><tr>                 <td class=\"param-name\">field</td>                 <td><p>string</p> </td>                 <td><p>Name of the variable</p> </td>             </tr></table></p> </td>\n            </tr></table>"
    - 
      type: "markdown-section"
      content: "<a name=Canvas></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">[canvas](api-canvas):&nbsp;</span>Instance of current canvas"
    - 
      type: "markdown-section"
      content: "<h2><span style=\"font-family: Source Code Pro;font-weight:500;font-size:24px;color: #eb5757\"><a name=layers></a> layers </span></h2>\n\nDefines an array of layers for the canvas. Each object in the array contains the definition of each layer which\nwill be shown in the canvas. Based on the rows and columns, and the x and y encoding fields given in the layer\ndefinition, it will be decided which layer will be shown on which unit in the canvas.\n\nTo give a layer definition,\n```\n   canvas\n     .rows(['Acceleration', 'Displacement'])\n     .columns(['Origin'])\n     .layers([\n         {\n             mark: 'bar',\n             encoding: {\n                 y: 'Acceleration'\n             }\n         },\n         {\n             mark: 'line',\n             encoding: {\n                 y: 'Displacement'\n             }\n         }\n     ]);\n```\nThis will create a two visual units on top of each other, and plot one bar layer for Acceleration measure and\na line layer for Displacement measure."
    - 
      type: "markdown-section"
      content: "<p class=\"sub-header\">Parameters:</p>\n<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead>\n<tr>\n                <td class=\"param-name\">def</td>\n                <td><p>LayerConfig</p> </td>\n                <td><p>Layers definition</p> </td>\n            </tr></table>"
    - 
      type: "markdown-section"
      content: "<a name=Canvas></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">[canvas](api-canvas):&nbsp;</span>Instance of current canvas"
    - 
      type: "markdown-section"
      content: "<h2><span style=\"font-family: Source Code Pro;font-weight:500;font-size:24px;color: #eb5757\"><a name=transform></a> transform </span></h2>\n\nCreates named transformed data from root data. Here the data is an instance of a DataModel.\n\n```\n.transform({\n     averageLine: [(dm) => dm.groupBy([''], { Horsepower: 'avg'})]\n });\n```"
    - 
      type: "markdown-section"
      content: "<p class=\"sub-header\">Parameters:</p>\n<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead>\n<tr>\n                <td class=\"param-name\">def</td>\n                <td><p>Object</p> </td>\n                <td><p>named definition of transformed data. This is a key value pair, where the key is name of the      source and value being the transfromation function. The name is used to refer in layers to invoke and attach      the data source to the layer instance.</p> </td>\n            </tr></table>"
    - 
      type: "markdown-section"
      content: "<a name=Canvas></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">[canvas](api-canvas):&nbsp;</span>Instance of current canvas"
    - 
      type: "markdown-section"
      content: "## <a name=mount></a> mount\n\nAttach a mount point to the canvas. Canvas starts rendering whenever it gets the mount point. However the\nrendering starts happenning in the next animation frame. Any property change after that triggers the auto render."
    - 
      type: "markdown-section"
      content: "<p class=\"sub-header\">Parameters:</p>\n<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead>\n<tr>\n                <td class=\"param-name\">el</td>\n                <td><p>HTMLElement</p> <p>string</p> </td>\n                <td><p>Reference of html element or css selectors on which the viz will house.</p> </td>\n            </tr></table>"
    - 
      type: "markdown-section"
      content: "<h2><span style=\"font-family: Source Code Pro;font-weight:500;font-size:24px;color: #eb5757\"><a name=title></a> title </span></h2>\n\nProvides the title for a visualization."
    - 
      type: "markdown-section"
      content: "<p class=\"sub-header\">Parameters:</p>\n<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead>\n<tr>\n                <td class=\"param-name\">text</td>\n                <td><p>string</p> </td>\n                <td><p>Title text. Text returned from <code>operator.html</code> is also supported.</p> </td>\n            </tr>\n<tr>\n                <td class=\"param-name\">config</td>\n                <td><p>object</p> </td>\n                <td><p>Title configuration.<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead></p> <p><tr>                 <td class=\"param-name\">position</td>                 <td><p>string</p> </td>                 <td><p>Position of the title text. Options are <code>&#39;TOP&#39;</code> or <code>&#39;BOTTOM&#39;</code>.</p> </td>             </tr></p> <p><tr>                 <td class=\"param-name\">align</td>                 <td><p>string</p> </td>                 <td><p>Alignment of title text for a particular position.</p> </td>             </tr></table></p> </td>\n            </tr></table>"
    - 
      type: "markdown-section"
      content: "<a name=Canvas></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">[canvas](api-canvas):&nbsp;</span>Instance of current canvas"
    - 
      type: "markdown-section"
      content: "<h2><span style=\"font-family: Source Code Pro;font-weight:500;font-size:24px;color: #eb5757\"><a name=subtitle></a> subtitle </span></h2>\n\nProvides the subtitle for a visualization."
    - 
      type: "markdown-section"
      content: "<p class=\"sub-header\">Parameters:</p>\n<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead>\n<tr>\n                <td class=\"param-name\">text</td>\n                <td><p>string</p> </td>\n                <td><p>Subtitle text. Text returned from <code>operator.html</code> is also supported.</p> </td>\n            </tr>\n<tr>\n                <td class=\"param-name\">config</td>\n                <td><p>object</p> </td>\n                <td><p>Subtitle configuration.<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead></p> <p><tr>                 <td class=\"param-name\">position</td>                 <td><p>string</p> </td>                 <td><p>Position of the subtitle text. Options are <code>&#39;TOP&#39;</code> or <code>&#39;BOTTOM&#39;</code>.</p> </td>             </tr></p> <p><tr>                 <td class=\"param-name\">align</td>                 <td><p>string</p> </td>                 <td><p>Alignment of sub title text for a particular position.</p> </td>             </tr></table></p> </td>\n            </tr></table>"
    - 
      type: "markdown-section"
      content: "<a name=Canvas></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">[canvas](api-canvas):&nbsp;</span>Instance of current canvas"
